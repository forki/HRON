using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

using System.Configuration;
using System.Data;
using System.Data.Entity;
using System.Data.SqlClient;
using System.Threading;
using System.Reflection;
using HRON.Properties;
using HRONLib;
using System.IO;
using RehostedWorkflowDesigner.Views;

namespace HRON
{
    /// <summary>
    /// Interaktionslogik für MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        protected HRONEntities entities = new HRONEntities();

        public MainWindow()
        {
            SetLanguageDictionary();
            InitializeComponent();
            //FillAll(System.Security.Principal.WindowsIdentity.GetCurrent().Name);
            try
            {
                string usr = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
                var user = entities.baUser.Where(u => u.userID == usr).First();

                lblUser.Content = user.userID;
                lblUserRight.Content = user.baUserGroup.userGroupDescription;
                String lang = Thread.CurrentThread.CurrentCulture.ToString();
                foreach (ComboBoxItem cbi in lblUserLocale.Items)
                    if (lang.StartsWith(cbi.Tag.ToString()))
                    {
                        lblUserLocale.SelectedItem = cbi;
                        break;
                    }

                System.Windows.Data.CollectionViewSource myCollectionViewSource = (System.Windows.Data.CollectionViewSource)this.Resources["wfViewSource"];
                entities.baWorkflows.Load();
                myCollectionViewSource.Source = entities.baWorkflows.Local;
            }
            catch (Exception e)
            {
                MessageBox.Show("Not autorized to access - "  + e.Message);
                //this.Close();
            }
        }

        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGrid dg = (DataGrid)sender;
            if(dg.Columns[0].IsReadOnly)
            {
                dg.Columns[0].CellStyle = new Style();
                dg.Columns[0].CellStyle.Setters.Add(new Setter(DataGridCell.BackgroundProperty, Brushes.LightGray));
            }

        }

        private void SetLanguageDictionary()
        {
            switch (Thread.CurrentThread.CurrentCulture.ToString())
            {
                case "de-AT":
                case "de-DE":
                    ChangeResources("de");
                    break;
                case "it-IT":
                    ChangeResources("it");
                    break;
                default:
                    ChangeResources("");
                    break;
            }
        }

        private void UIElement_OnPreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            //until we had a StaysOpen glag to Drawer, this will help with scroll bars
            var dependencyObject = Mouse.Captured as DependencyObject;
            while (dependencyObject != null)
            {
                if (dependencyObject is ScrollBar) return;
                dependencyObject = VisualTreeHelper.GetParent(dependencyObject);
            }

            MenuToggleButton.IsChecked = false;
        }

        private void MasterdataListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ListBox lb = (ListBox)sender;
            if (lb.SelectedItem == null)
                return;

            ListBoxItem rg = (ListBoxItem)lb.SelectedItem;

            HRONEntities ent = new HRONEntities();
            if (rg.Name == "baBusinessUnitID") addTab(new MasterData<DbSet<baBusinessUnitID>, baBusinessUnitID>(ent.baBusinessUnitID, ent), this.Resources["masterDatabaBusinessUnitID"].ToString());
            if (rg.Name == "baCarPolicy") addTab(new MasterData<DbSet<baCarPolicy>, baCarPolicy>(ent.baCarPolicy, ent), this.Resources["masterDatababaCarPolicy"].ToString());
            if (rg.Name == "baCDC") addTab(new MasterData<DbSet<baCDC>, baCDC>(ent.baCDC, ent), this.Resources["masterDatabaCDC"].ToString());
            if (rg.Name == "baCompanyRights") addTab(new MasterData<DbSet<baCompanyRights>, baCompanyRights>(ent.baCompanyRights, ent), this.Resources["masterDatababaCompanyRights"].ToString());
            if (rg.Name == "baContractType") addTab(new MasterData<DbSet<baContractType>, baContractType>(ent.baContractType, ent), this.Resources["masterDatabaContractType"].ToString());
            if (rg.Name == "baCountry") addTab(new MasterData<DbSet<baCountry>, baCountry>(ent.baCountry, ent), this.Resources["masterDatabaCountry"].ToString());
            if (rg.Name == "baFringeBenefit") addTab(new MasterData<DbSet<baFringeBenefit>, baFringeBenefit>(ent.baFringeBenefit, ent), this.Resources["masterDatababaFringeBenefit"].ToString());
            if (rg.Name == "baFunctions") addTab(new MasterData<DbSet<baFunctions>, baFunctions>(ent.baFunctions, ent), this.Resources["masterDatababaFunctions"].ToString());
            if (rg.Name == "baJobTitle") addTab(new MasterData<DbSet<baJobTitle>, baJobTitle>(ent.baJobTitle, ent), this.Resources["masterDatabaJobTitle"].ToString());
            if (rg.Name == "baLevel") addTab(new MasterData<DbSet<baLevel>, baLevel>(ent.baLevel, ent), this.Resources["masterDatabaLevel"].ToString());
            if (rg.Name == "baNationality") addTab(new MasterData<DbSet<baNationality>, baNationality>(ent.baNationality, ent), this.Resources["masterDatabaNationality"].ToString());
            if (rg.Name == "baSpecialization") addTab(new MasterData<DbSet<baSpecialization>, baSpecialization>(ent.baSpecialization, ent), this.Resources["masterDatabaSpecialization"].ToString());
            if (rg.Name == "baStudyTitle") addTab(new MasterData<DbSet<baStudyTitle>, baStudyTitle>(ent.baStudyTitle,ent), this.Resources["masterDatabaStudyTitle"].ToString());
            if (rg.Name == "baTimeType") addTab(new MasterData<DbSet<baTimeType>, baTimeType>(ent.baTimeType, ent), this.Resources["masterDatabaTimeType"].ToString());
            if (rg.Name == "baType") addTab(new MasterData<DbSet<baType>, baType>(ent.baType, ent), this.Resources["masterDatabaType"].ToString());
            if (rg.Name == "baWorkPlace") addTab(new MasterData<DbSet<baWorkPlace>, baWorkPlace>(ent.baWorkPlace,ent), this.Resources["masterDatabaWorkPlace"].ToString());
            if (rg.Name == "baUser") addTab(new MasterData<DbSet<baUser>, baUser>(ent.baUser, ent), this.Resources["masterDatabaUser"].ToString());
            if (rg.Name == "baUserGroup") addTab(new MasterData<DbSet<baUserGroup>, baUserGroup>(ent.baUserGroup, ent), this.Resources["masterDatabaUserGroup"].ToString());
            if (rg.Name == "baDocumentation") addTab(new MasterDataDocumentations<DbSet<baDocumentation>, baDocumentation>(ent.baDocumentation, ent), this.Resources["masterDatabaDocumentation"].ToString());

            lb.UnselectAll();
        }

        private void lblUserLocale_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox cb = (ComboBox)sender;
            ComboBoxItem cbi = ((ComboBoxItem)cb.SelectedItem);
            ChangeResources(cbi.Tag.ToString());
        }

        private void ChangeResources(string cbi)
        {
            ResourceDictionary dict = new ResourceDictionary();
            ResourceDictionary dictEn = new ResourceDictionary();

            if (cbi == "de")
                dict.Source = new Uri("..\\Resources\\StringResources.de-DE.xaml",
                                   UriKind.Relative);
            else if (cbi == "it")
                dict.Source = new Uri("..\\Resources\\StringResources.it-IT.xaml",
                                   UriKind.Relative);

            dictEn.Source = new Uri("..\\Resources\\StringResources.xaml",
                                  UriKind.Relative);
            this.Resources.MergedDictionaries.Add(dictEn);
            this.Resources.MergedDictionaries.Add(dict);
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            UserEdit ue = new UserEdit(this, 1);
            addTab(ue, "test 2");
        }

        private void btnEmploy_click(object sender, RoutedEventArgs e)
        {
            UserList ul = new UserList(this);
            addTab(ul, "Employee's");
        }

        public void closeTab(UserControl ctr)
        {
            if (tabControl.Items != null)
                foreach (object o in tabControl.Items)
                {
                    if (o is TabItem && ((TabItem)o).Content.Equals(ctr))
                    {
                        tabControl.Items.Remove(o);
                        return;
                    }
                }
        }

        public void addTab(UserControl ctr, string header)
        {
            if(tabControl.Items!=null)
                foreach(object o in tabControl.Items)
                {
                    if(o is TabItem && ((TabItem)o).Header.ToString()==header)
                    {
                        tabControl.SelectedItem = o;
                        return;
                    }
                }

            TabItem ti = new TabItem();
            ti.Header = header;
            ti.Content = ctr;

            tabControl.SelectedIndex = tabControl.Items.Add(ti);
        }

        private void btnWfDesigner_Click(object sender, RoutedEventArgs e)
        {

        }

        private void WFListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ListBox lb = (ListBox)sender;
            if (lb.SelectedItem == null)
                return;

            baWorkflows workflow = lb.SelectedItem as baWorkflows;

            RehostedWorkflowDesigner.Views.MainWindow designer = new RehostedWorkflowDesigner.Views.MainWindow();
            designer.onSave += Designer_onSave;
            designer.openFile(workflow);
            designer.Show();
        }

        private void Designer_onSave(object sender, EventArgsSave e)
        {
            RehostedWorkflowDesigner.Views.MainWindow designer = (RehostedWorkflowDesigner.Views.MainWindow)sender;

            baWorkflows workflow = e.baWorkflows;
            string fileName = e.FileName;
            if(File.Exists(fileName))
            {
                workflow.WorkFlowXAML = File.ReadAllBytes(fileName);
                entities.SaveChanges();
            }
        }
    }
}
