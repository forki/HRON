//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HRONWeb.ApprovalWF {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WFIdentification", Namespace="http://schemas.datacontract.org/2004/07/HRWorkflowService.Contract")]
    [System.SerializableAttribute()]
    public partial class WFIdentification : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid WFIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityID {
            get {
                return this.ActivityIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityIDField, value) != true)) {
                    this.ActivityIDField = value;
                    this.RaisePropertyChanged("ActivityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid WFID {
            get {
                return this.WFIDField;
            }
            set {
                if ((this.WFIDField.Equals(value) != true)) {
                    this.WFIDField = value;
                    this.RaisePropertyChanged("WFID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://HRONLib.Contracts/2017/04", ConfigurationName="ApprovalWF.IApprovalService")]
    public interface IApprovalService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://HRONLib.Contracts/2017/04/IApprovalService/startApprovalProcess", ReplyAction="http://HRONLib.Contracts/2017/04/IApprovalService/startApprovalProcessRespons" +
            "e")]
        HRONWeb.ApprovalWF.WFIdentification startApprovalProcess(string MailAddress, string MailBody, string MailSubject, System.TimeSpan WaitTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://HRONLib.Contracts/2017/04/IApprovalService/startApprovalProcess", ReplyAction="http://HRONLib.Contracts/2017/04/IApprovalService/startApprovalProcessRespons" +
            "e")]
        System.Threading.Tasks.Task<HRONWeb.ApprovalWF.WFIdentification> startApprovalProcessAsync(string MailAddress, string MailBody, string MailSubject, System.TimeSpan WaitTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://HRONLib.Contracts/2017/04/IApprovalService/sendApprovalResponse", ReplyAction="http://HRONLib.Contracts/2017/04/IApprovalService/sendApprovalResponseRespons" +
            "e")]
        bool sendApprovalResponse(HRONWeb.ApprovalWF.WFIdentification wfIdentification, bool approved, string note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://HRONLib.Contracts/2017/04/IApprovalService/sendApprovalResponse", ReplyAction="http://HRONLib.Contracts/2017/04/IApprovalService/sendApprovalResponseRespons" +
            "e")]
        System.Threading.Tasks.Task<bool> sendApprovalResponseAsync(HRONWeb.ApprovalWF.WFIdentification wfIdentification, bool approved, string note);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IApprovalServiceChannel : HRONWeb.ApprovalWF.IApprovalService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ApprovalServiceClient : System.ServiceModel.ClientBase<HRONWeb.ApprovalWF.IApprovalService>, HRONWeb.ApprovalWF.IApprovalService {
        
        public ApprovalServiceClient() {
        }
        
        public ApprovalServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ApprovalServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApprovalServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApprovalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HRONWeb.ApprovalWF.WFIdentification startApprovalProcess(string MailAddress, string MailBody, string MailSubject, System.TimeSpan WaitTime) {
            return base.Channel.startApprovalProcess(MailAddress, MailBody, MailSubject, WaitTime);
        }
        
        public System.Threading.Tasks.Task<HRONWeb.ApprovalWF.WFIdentification> startApprovalProcessAsync(string MailAddress, string MailBody, string MailSubject, System.TimeSpan WaitTime) {
            return base.Channel.startApprovalProcessAsync(MailAddress, MailBody, MailSubject, WaitTime);
        }
        
        public bool sendApprovalResponse(HRONWeb.ApprovalWF.WFIdentification wfIdentification, bool approved, string note) {
            return base.Channel.sendApprovalResponse(wfIdentification, approved, note);
        }
        
        public System.Threading.Tasks.Task<bool> sendApprovalResponseAsync(HRONWeb.ApprovalWF.WFIdentification wfIdentification, bool approved, string note) {
            return base.Channel.sendApprovalResponseAsync(wfIdentification, approved, note);
        }
    }
}
